state_data[[valid_outcomes[outcome]]] <- as.numeric(state_data[[valid_outcomes[outcome]]])
## Order the data
state_data <- state_data[order(state_data[[valid_outcomes[outcome]]], state_data$Hospital.Name), ]
## Handle num argument
if (num == "best") {
rank = 1
} else if (num == "worst") {
rank = nrow(state_data)
} else if (is.numeric(num)) {
if (num > nrow(state_data)) {
rank = NA
} else {
rank = num
}
} else {
stop("invalid num argument")
}
## Add hospital name of the given rank to the results data frame
results$hospital[i] <- state_data$Hospital.Name[rank]
}
## Drop the rows with NA in the hospital column
results <- na.omit(results)
## Sort the results by state
results <- results[order(results$state), ]
## Return a data frame with the hospital names and the (abbreviated) state name
return(results)
}
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
library(data.table)
rankHospital <- function(state, outcome, num="best") {
# Read outcome data
dt <- data.table::fread("data/outcome-of-care-measures.csv")
# change outcome to lowercase
outcome <- tolower(outcome)
# change variable name to prevent confusion
chosen_state <- state
# Check state and outcome are valid, if not return warning message
if (!chosen_state %in% unique(dt[["State"]])) {
stop("Invalid state")
}
if (!outcome %in% c("heart attack", "heart failure", "pneumonia")) {
stop("Invalid outcome")
}
dt <- dt %>%
rename_with(~ tolower(gsub("^Hospital 30-Day Death \\(Mortality\\) Rates from ", "", .x))) %>%
filter(state == chosen_state) %>%
mutate(rate = suppressWarnings(as.numeric(get(outcome)))) %>%
clean_names() %>%
select(hospital_name, state, rate) %>%
filter(complete.cases(.)) %>%
arrange(rate, hospital_name) %>%
mutate(rank = row_number())
if (num == "best") {
unlist(head(dt[[1]], 1))
}
else if (num == "worst") {
unlist(tail(dt[[1]], 1))
}
else {
dt %>%
slice(num) %>%
select(hospital_name) %>%
unlist()
}
}
rankhospital("NC", "heart attack", "worst")
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data_outcome <- utils::read.csv(file = "./data/outcome-of-care-measures.csv",
colClasses = "character")
# Adding the row number
data_outcome <- data_outcome %>% add_rownames()
# Create a unique list of STATE
states_outcome <- base::unique(data_outcome$State)
# List of outcomes
list_disease <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
# Valid STATE and Valid OUTCOME
if ((state %in% states_outcome) & (outcome %in% list_disease)) {
# Subsetting the raw data.
# I want the death data of the last 30 Day all and other columns I will ignore.
data_tidy <- data_outcome %>%
select(rowname, Hospital.Name,
State,
starts_with("Hospital.30.Day.Death"))
# Renaming columns to be more readable.
colnames(data_tidy) <- c("rowname",
"hospital_name",
"hospital_state",
"heart_attack",
"heart_failure",
"pneumonia")
# Uniforming the colnames with underscore to match during the select.
outcome_ <- sub(pattern = " ",
replacement = "_",
x = outcome)
# Converting character into numeric.
# The read.csv has forced all columns to be character (colClasses = "character")
data_tidy$heart_attack <- as.numeric(data_tidy$heart_attack)
data_tidy$heart_failure <- as.numeric(data_tidy$heart_failure)
data_tidy$pneumonia <- as.numeric(data_tidy$pneumonia)
# Subsetting the input outcome given from the operator.
data_rank <- data_tidy %>%
select(rowname,                #
hospital_name,          # Selecting: Hospital name, Hospital State
hospital_state,         #            and outcome
all_of(outcome_)) %>%   #
filter(hospital_state == state) %>%  # Filtering the data based on state given by operator.
na.omit() %>%                        # Filtering only rows with data
arrange(across(all_of(outcome_)),    # Arranging first by the outcome, then by hospital name
hospital_name) %>%           #
mutate(Rank = 1:nrow(.))             # Add a column with the ranking of each hospital.
# The num input has two conditions:
# 1. numeric
# 2. character
# Checking if the num input is character:
if (is.character(num)) {
# However, there are 2 conditions in this case of character:
# 1. best -> I need to show the best hospital
# 2. worst -> I need to show the worst hospital
# IN CASE: the num variable is the character's worst.
if (num == "worst") {
# TAIL will give the worst hospital in that outcome.
data_rank %>%
select(-hospital_state) %>%
rename(" " = rowname,
"Hospital.Name" = hospital_name,
"Rate" = all_of(outcome_),
"Rank" = Rank) %>%
tail(1) %>%
select(Hospital.Name) %>%
as.character() -> output
# Return the hospital with the worst outcome.
return(output)
}
# IN CASE: the num variable is the character's best.
else if (num == "best") {
# HEAD will select the best hospital in that outcome.
data_rank %>%
select(-hospital_state) %>%
rename(" " = rowname,
"Hospital.Name" = hospital_name,
"Rate" = all_of(outcome_),
"Rank" = Rank) %>%
head(Rank == num) %>%
select(Hospital.Name) %>%
as.character() -> output
# Return the hospital with the best outcome.
return(output)
}
# The script only accepts characters: best and worst.
# Any other characters will throw an error.
else {
return(cat("Please, check the num input."))
}
}
# Checking if the num input is a numeric variable and the num input and if it is a single number.
# should be a single value (not a vector).
if (is.numeric(num) & length(num) == 1) {
# We have also two conditions here:
# 1. If the num input is out of the boundaries
# 2. A single number between 1 and the number of hospital.
# IN CASE the num input is between 1 the number of rows of the dataset.
if (num >= 1 & num < nrow(data_rank)) {
# Filter will select the exactly num rank.
data_rank %>%
select(-hospital_state) %>%
rename(" " = rowname,
"Hospital.Name" = hospital_name,
"Rate" = all_of(outcome_),
"Rank" = Rank) %>%
filter(Rank == num) %>%
select(Hospital.Name) %>%
as.character() -> output
# Return the hospital in the "num position" in that outcome.
return(output)
}
# The num input is wrong because is negative, zero or above the number of hospital.
else {
# Following the instructions. For num above of the number of hospital return NA.
return(NA)
}
}
# Warning the operator about a problem in num input.
else if (length(num) >= 2) {
return(print("Please, make sure your num input is a single value."))
}
}
# Something is wrong with the inputs
# The state input in not a valid one
else if (!(state %in% states_outcome) & (outcome %in% list_disease)) {
return(base::cat(base::sprintf('Error in best("%s", "%s") : invalid state', state, outcome)))
}
# The outcome in not valid.
else if ((state %in% states_outcome) & !(outcome %in% list_disease)) {
return(base::cat(base::sprintf('Error in best("%s", "%s") : invalid outcome', state, outcome)))
}
# Both state and outcome has typos
else if (!(state %in% states_outcome) & !(outcome %in% list_disease)) {
return(base::cat(base::sprintf('Error in best("%s", "%s") : invalid state and outcome', state, outcome)))
}
}
rankhospital("NC", "heart attack", "worst")
rankhospital("NC", "heart attack", "worst")
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data_outcome <- utils::read.csv(file = "outcome-of-care-measures.csv",
colClasses = "character")
# Adding the row number
data_outcome <- data_outcome %>% add_rownames()
# Create a unique list of STATE
states_outcome <- base::unique(data_outcome$State)
# List of outcomes
list_disease <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
# Valid STATE and Valid OUTCOME
if ((state %in% states_outcome) & (outcome %in% list_disease)) {
# Subsetting the raw data.
# I want the death data of the last 30 Day all and other columns I will ignore.
data_tidy <- data_outcome %>%
select(rowname, Hospital.Name,
State,
starts_with("Hospital.30.Day.Death"))
# Renaming columns to be more readable.
colnames(data_tidy) <- c("rowname",
"hospital_name",
"hospital_state",
"heart_attack",
"heart_failure",
"pneumonia")
# Uniforming the colnames with underscore to match during the select.
outcome_ <- sub(pattern = " ",
replacement = "_",
x = outcome)
# Converting character into numeric.
# The read.csv has forced all columns to be character (colClasses = "character")
data_tidy$heart_attack <- as.numeric(data_tidy$heart_attack)
data_tidy$heart_failure <- as.numeric(data_tidy$heart_failure)
data_tidy$pneumonia <- as.numeric(data_tidy$pneumonia)
# Subsetting the input outcome given from the operator.
data_rank <- data_tidy %>%
select(rowname,                #
hospital_name,          # Selecting: Hospital name, Hospital State
hospital_state,         #            and outcome
all_of(outcome_)) %>%   #
filter(hospital_state == state) %>%  # Filtering the data based on state given by operator.
na.omit() %>%                        # Filtering only rows with data
arrange(across(all_of(outcome_)),    # Arranging first by the outcome, then by hospital name
hospital_name) %>%           #
mutate(Rank = 1:nrow(.))             # Add a column with the ranking of each hospital.
# The num input has two conditions:
# 1. numeric
# 2. character
# Checking if the num input is character:
if (is.character(num)) {
# However, there are 2 conditions in this case of character:
# 1. best -> I need to show the best hospital
# 2. worst -> I need to show the worst hospital
# IN CASE: the num variable is the character's worst.
if (num == "worst") {
# TAIL will give the worst hospital in that outcome.
data_rank %>%
select(-hospital_state) %>%
rename(" " = rowname,
"Hospital.Name" = hospital_name,
"Rate" = all_of(outcome_),
"Rank" = Rank) %>%
tail(1) %>%
select(Hospital.Name) %>%
as.character() -> output
# Return the hospital with the worst outcome.
return(output)
}
# IN CASE: the num variable is the character's best.
else if (num == "best") {
# HEAD will select the best hospital in that outcome.
data_rank %>%
select(-hospital_state) %>%
rename(" " = rowname,
"Hospital.Name" = hospital_name,
"Rate" = all_of(outcome_),
"Rank" = Rank) %>%
head(Rank == num) %>%
select(Hospital.Name) %>%
as.character() -> output
# Return the hospital with the best outcome.
return(output)
}
# The script only accepts characters: best and worst.
# Any other characters will throw an error.
else {
return(cat("Please, check the num input."))
}
}
# Checking if the num input is a numeric variable and the num input and if it is a single number.
# should be a single value (not a vector).
if (is.numeric(num) & length(num) == 1) {
# We have also two conditions here:
# 1. If the num input is out of the boundaries
# 2. A single number between 1 and the number of hospital.
# IN CASE the num input is between 1 the number of rows of the dataset.
if (num >= 1 & num < nrow(data_rank)) {
# Filter will select the exactly num rank.
data_rank %>%
select(-hospital_state) %>%
rename(" " = rowname,
"Hospital.Name" = hospital_name,
"Rate" = all_of(outcome_),
"Rank" = Rank) %>%
filter(Rank == num) %>%
select(Hospital.Name) %>%
as.character() -> output
# Return the hospital in the "num position" in that outcome.
return(output)
}
# The num input is wrong because is negative, zero or above the number of hospital.
else {
# Following the instructions. For num above of the number of hospital return NA.
return(NA)
}
}
# Warning the operator about a problem in num input.
else if (length(num) >= 2) {
return(print("Please, make sure your num input is a single value."))
}
}
# Something is wrong with the inputs
# The state input in not a valid one
else if (!(state %in% states_outcome) & (outcome %in% list_disease)) {
return(base::cat(base::sprintf('Error in best("%s", "%s") : invalid state', state, outcome)))
}
# The outcome in not valid.
else if ((state %in% states_outcome) & !(outcome %in% list_disease)) {
return(base::cat(base::sprintf('Error in best("%s", "%s") : invalid outcome', state, outcome)))
}
# Both state and outcome has typos
else if (!(state %in% states_outcome) & !(outcome %in% list_disease)) {
return(base::cat(base::sprintf('Error in best("%s", "%s") : invalid state and outcome', state, outcome)))
}
}
rankhospital("NC", "heart attack", "worst")
rankhospital <- function(state, outcome, num="best")
{
# read outcome data (outcome-of-care-measures.csv)
outcome_data <- read.csv("outcome-of-care-measures.csv")
# Check the state and outcome are valid :-
#1. if state invalid throw an error via stop function "invalid state"
#2. if outcome invalid throw an error via stop function "invalid outcome"
outcome_existing <- c("heart attack","heart failure","pneumonia")
if(is.na(match(outcome,outcome_existing)))
{
stop("invalid outcome")
}
if(is.na(match(state, unique(outcome_data$State))))
{
stop("invalid state")
}
# read the 30-day mortality rate for the given outcome and store it in a variable
if(outcome == outcome_existing[1])
{
input = "Heart.Attack"
}else if(outcome == outcome_existing[2])
{
input = "Heart.Failure"
}else
{
input = "Pneumonia"
}
lowest_outcome_30_day_mortality_rate <- paste("Hospital.30.Day.Death..Mortality..Rates.from.",input,sep="")
# return the name of the hospital(character) for the given city & the given outcome :-
# 1. num = 3 specifies, 3rd lowest 30-day mortality rate. That is '3rd BEST'
# 2. num = "worst" specifies the highest 30-day mortality rate. That is 'WORST'
# 3. num = "best" specifies the lowest 30-day mortality rate. That is 'BEST'
# 4. if num larger than number of hospitals return NA
# 5. ties must be handled alphabetically
# 6. order can used to sort vectors
final_outcome_dataframe = subset(outcome_data,outcome_data$State == state)
index_column <- which(names(final_outcome_dataframe) == lowest_outcome_30_day_mortality_rate)
# not available removed, state = state, outcome = outcome. Just find the min index
final_outcome_subset <- subset(final_outcome_dataframe, final_outcome_dataframe[,index_column]!="Not Available")
final_outcome_numeric <- as.numeric(as.matrix(final_outcome_subset)[,index_column])
final_outcome_sorted <- sort(final_outcome_numeric) # increasing order
#print (final_outcome_sorted[num])
#print(hospital_index)
if(num =="best")
{
n = final_outcome_sorted[1]
best_index = which(n == final_outcome_subset[,lowest_outcome_30_day_mortality_rate])
return (sort((as.character(final_outcome_subset$Hospital.Name[best_index])))[1])
#return sort(final_outcome_subset$Hospital.Name[best_index])
}else if(num == "worst")
{
n = final_outcome_sorted[length(final_outcome_sorted)]
worst_index = which(n == final_outcome_subset[,lowest_outcome_30_day_mortality_rate])[1]
return (sort((as.character(final_outcome_subset$Hospital.Name[worst_index])))[1])
}else
{
hospital_index = which(final_outcome_sorted[num] == final_outcome_subset[,lowest_outcome_30_day_mortality_rate])[1]
return (sort((as.character(final_outcome_subset$Hospital.Name[hospital_index])))[1])
}
}
rankhospital("NC", "heart attack", "worst")
# create a rankhospital function
rankhospital <- function(state, outcome, rank = "best"){
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
fd   <- as.data.frame(cbind(data[, 2],  # hospital
data[, 7],  # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (!state %in% fd[, "state"]) {
stop('invalid state')
} else if (!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
} else if (is.numeric(rank)) {
si <- which(fd[, "state"] == state)
ts <- fd[si, ]                     # extracting dataframe for the called state
ts[, eval(outcome)] <- as.numeric(ts[, eval(outcome)])
ts <- ts[order(ts[, eval(outcome)], ts[, "hospital"]), ]
output <- ts[, "hospital"][rank]
} else if (!is.numeric(rank)){
if (rank == "best") {
output <- best(state, outcome)
} else if (rank == "worst") {
si <- which(fd[, "state"] == state)
ts <- fd[si, ]
ts[, eval(outcome)] <- as.numeric(ts[, eval(outcome)])
ts <- ts[order(ts[, eval(outcome)], ts[, "hospital"], decreasing = TRUE), ]
output <- ts[, "hospital"][1]
} else {
stop('invalid rank')
}
}
return(output)
}
# try out
rankhospital("TX", "heart failure", 4)
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
rankall <- function(outcome, num = "best"){
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
fd   <- as.data.frame(cbind(data[, 2],  # hospital
data[, 7],  # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
fd[, eval(outcome)] <- as.numeric(fd[, eval(outcome)])
## Check that state and outcome are valid
if (!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
} else if (is.numeric(num)) {
by_state <- with(fd, split(fd, state))
ordered  <- list()
for (i in seq_along(by_state)){
by_state[[i]] <- by_state[[i]][order(by_state[[i]][, eval(outcome)],
by_state[[i]][, "hospital"]), ]
ordered[[i]]  <- c(by_state[[i]][num, "hospital"], by_state[[i]][, "state"][1])
}
result <- do.call(rbind, ordered)
output <- as.data.frame(result, row.names = result[, 2], stringsAsFactors = FALSE)
names(output) <- c("hospital", "state")
} else if (!is.numeric(num)) {
if (num == "best") {
by_state <- with(fd, split(fd, state))
ordered  <- list()
for (i in seq_along(by_state)){
by_state[[i]] <- by_state[[i]][order(by_state[[i]][, eval(outcome)],
by_state[[i]][, "hospital"]), ]
ordered[[i]]  <- c(by_state[[i]][1, c("hospital", "state")])
}
result <- do.call(rbind, ordered)
output <- as.data.frame(result, stringsAsFactors = FALSE)
rownames(output) <- output[, 2]
} else if (num == "worst") {
by_state <- with(fd, split(fd, state))
ordered  <- list()
for (i in seq_along(by_state)){
by_state[[i]] <- by_state[[i]][order(by_state[[i]][, eval(outcome)],
by_state[[i]][, "hospital"],
decreasing = TRUE), ]
ordered[[i]]  <- c(by_state[[i]][1, c("hospital", "state")])
}
result <- do.call(rbind, ordered)
output <- as.data.frame(result, stringsAsFactors = FALSE)
rownames(output) <- output[, 2]
} else {
stop('invalid num')
}
}
return(output)
}
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
