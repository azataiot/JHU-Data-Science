library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "be8ac194725cb8033946",
secret = "f0a118015cb1f303548bbd72006342db8054d5e8"
)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
library(jsonlite)
# parse the JSON response
data <- content(req, as = "parsed", type = "application/json")
# extract and print the creation time
created_at <- data$created_at
print(created_at)
data
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repos/jtleek/datasharing", gtoken)
stop_for_status(req)
content(req)
# parse the JSON response
data <- content(req, as = "parsed", type = "application/json")
# extract and print the creation time
created_at <- data$created_at
print(created_at)
acs <- read.csv("data/getdata_data_ss06pid.csv")
head(acs)
install.packages("sqldf")
unique(acs$AGEP)
library(sqldf)
library(sqldf)
sqldf("select distinct AGEP from acs")
con <- url("https://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(con)
close(con)
htmlCode
nchar(htmlCode)
nchar(htmlCode)[10]
nchar(htmlCode)[20]
nchar(htmlCode)[30]
nchar(htmlCode)[100]
data <- read.table('getdata_wksst8110.for', skip = 2, header = FALSE, stringsAsFactors = FALSE)
data <- read.table('data/getdata_wksst8110.for', skip = 2, header = FALSE, stringsAsFactors = FALSE)
# Read in the data, skipping the first 2 header rows
data <- read.table('data/getdata_wksst8110.for', skip = 2, header = FALSE, stringsAsFactors = FALSE)
str(read.table)
data <- read.table("data/getdata_wksst8110.for", skip = 3, header = FALSE, col.names = c("week","n12","n3","n34","n4"))
data <- read.table("data/getdata_wksst8110.for", skip = 4, header = FALSE, col.names = c("week","n12","n3","n34","n4"))
data <- read.table("data/getdata_wksst8110.for", skip = 4,sep = "     ", header = FALSE, col.names = c("week","n12","n3","n34","n4"))
data <- read.table("data/getdata_wksst8110.for", skip = 4, header = FALSE, col.names = c("week","n12","n3","n34","n4"))
con <- file("data/getdata_wksst8110.for")
lines <- readLines(con)
close(con)
liens[1]
lines[1]
lines[2]
lines[3]
lines[4]
lines[5]
data <- read.table("data/getdata_wksst8110.for", skip = 4, header = FALSE, col.names = c("week","n12sst","n12ssta","n3sst","n3ssta","n34sst","n34ssta","n4sst","n4ssta"))
data <- read.table("data/getdata_wksst8110.for", skip = 4, header = FALSE, col.names = c("week","n12sstssta","n3sstssta","n34sst","n34ssta","n4sst","n4ssta"))
data <- read.table("data/getdata_wksst8110.for", skip = 4, header = FALSE, col.names = c("week","n12sstssta","n3sstssta","n34sst","n34ssta","n4sst","n4ssta"))
data <- read.table("data/getdata_wksst8110.for", skip = 4, header = FALSE)
# Read the table
data <- read.table("data/getdata_wksst8110.for", sep = "", skip = 3, header = FALSE)
# Read the table
data <- read.table("data/getdata_wksst8110.for", sep = "", skip = 4, header = FALSE)
# Read in the lines
lines <- readLines("data/getdata_wksst8110.for")
# Remove the first three lines
lines <- lines[-(1:4)]
# Process each line
data <- lapply(lines, function(x) {
# Split on spaces
split_line <- strsplit(x, " ")[[1]]
# Remove empty entries
split_line <- split_line[split_line != ""]
# Convert to numeric values where possible
split_line <- sapply(split_line, function(x) {
ifelse(grepl("\\d", x), as.numeric(x), x)
})
return(split_line)
})
# Convert to data frame and name columns
data <- do.call(rbind, data)
colnames(data) <- c("week", "n12", "n3", "n34", "n4")
# Read in the lines
lines <- readLines("data/getdata_wksst8110.for")
# Remove the first three lines
lines <- lines[-(1:3)]
# Process each line
data <- lapply(lines, function(x) {
# Split on spaces
split_line <- strsplit(x, " ")[[1]]
# Remove empty entries
split_line <- split_line[split_line != ""]
# Convert to numeric values where possible
split_line <- sapply(split_line, function(x) {
ifelse(grepl("\\d", x), as.numeric(x), x)
})
return(split_line)
})
# Convert to data frame and name columns
data <- do.call(rbind, data)
colnames(data) <- c("week", "n12", "n3", "n34", "n4")
# Read in the lines
lines <- readLines("data/getdata_wksst8110.for")
# Remove the first three lines
lines <- lines[-(1:3)]
lines[1]
# Read in the lines
lines <- readLines("data/getdata_wksst8110.for")
# Remove the first three lines
lines <- lines[-(1:4)]
lines[1]
# Process each line
data <- lapply(lines, function(x) {
# Split on exactly 8 spaces
split_line <- strsplit(x, "\\s{8}")[[1]]
# Remove empty entries
split_line <- split_line[split_line != ""]
# Convert to numeric values where possible
split_line <- sapply(split_line, function(x) {
ifelse(grepl("\\d", x), as.numeric(x), x)
})
return(split_line)
})
# Convert to data frame and name columns
data <- do.call(rbind, data)
colnames(data) <- c("week", "n12", "n3", "n34", "n4")
data
split_line <- strsplit(x, "\\s{8}")[[1]]
split_line <- strsplit(lines[1], "\\s{8}")[[1]]
strsplit(lines[1], "\\s{8}")[[1]]
line <- strsplit(lines[1], "\\s{8}")[[1]]
length(line)
line <- line[line !=""]
line
# Read in the data, skipping the first 2 header rows
data <- read.table('data/getdata_wksst8110.for', skip = 2, header = FALSE, stringsAsFactors = FALSE)
# Read in the data, skipping the first 2 header rows
data <- read.table('data/getdata_wksst8110.for', skip = 3, header = FALSE, stringsAsFactors = FALSE)
setwd("/Volumes/LocalData/Developer/JHU-Data-Science/3. Getting and Cleaning Data/week3")
