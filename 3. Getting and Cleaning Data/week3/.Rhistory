g <- graph_from_edgelist(edges)
# Define labels for the nodes as their states
states <- c("S0", "S1(H)", "S1(T)", "S2(HH)", "S2(HT)", "S2(TH)", "S2(TT)")
# Define labels for the nodes as their stock prices
V(g)$label <- round(stock_prices, 2)
# Generate the layout for the tree
layout <- layout_as_tree(g)
# Plot the binomial tree with numerical values
plot(g, layout = layout, vertex.size = 20, vertex.color = "skyblue", vertex.label.dist = 1)
# Add the state labels outside the vertices
for (i in 1:length(states)) {
text(layout[i, 1], layout[i, 2] - 0.1, labels = states[i])
}
library(DiagrammeR)
mermaid('
graph LR
S0["S0=120"]
S1H["S1(H)=144"]
S1T["S1(T)=108"]
S2HH["S2(HH)=172.8"]
S2HT["S2(HT)=129.6"]
S2TH["S2(TH)=97.2"]
S2TT["S2(TT)=86.4"]
S0 --- S1H
S0 --- S1T
S1H --- S2HH
S1H --- S2HT
S1T --- S2TH
S1T --- S2TT
')
library(DiagrammeR)
mermaid('
graph LR
S0["S0=120"]
S1H["S1(H)=144"]
S1T["S1(T)=108"]
S2HH["S2(HH)=172.8"]
S2HT["S2(HT)=129.6"]
S2TH["S2(TH)=97.2"]
S2TT["S2(TT)=86.4"]
S0 --- S1H
S0 --- S1T
S1H --- S2HH
S1H --- S2HT
S1T --- S2TH
S1T --- S2TT
')
library(DiagrammeR)
mermaid('
graph LR
S0["S0=120"]
S1H["S1(H)=144"]
S1T["S1(T)=108"]
S2HH["S2(HH)=172.8"]
S2HT["S2(HT)=129.6"]
S2TH["S2(TH)=97.2"]
S2TT["S2(TT)=86.4"]
S0 --- S1H
S0 --- S1T
S1H --- S2HH
S1H --- S2HT
S1T --- S2TH
S1T --- S2TT
')
# Input parameters
S2_HH <- 172.8
S2_HT <- 129.6
S2_TH <- 97.2
S2_TT <- 86.4
K <- 120
# Calculate option values
V2_HH <- max(S2_HH - K, 0)
V2_HT <- max(S2_HT - K, 0)
V2_TH <- max(S2_TH - K, 0)
V2_TT <- max(S2_TT - K, 0)
# Print results
V2_HH
V2_HT
V2_TH
V2_TT
# Input parameters
S2_HH <- 172.8
S2_HT <- 129.6
S2_TH <- 97.2
S2_TT <- 86.4
K <- 120
# Calculate option values
V2_HH <- max(S2_HH - K, 0)
V2_HT <- max(S2_HT - K, 0)
V2_TH <- max(S2_TH - K, 0)
V2_TT <- max(S2_TT - K, 0)
# Create a data frame
results <- data.frame(
State = c("S2(HH)", "S2(HT)", "S2(TH)", "S2(TT)"),
Stock_Price = c(S2_HH, S2_HT, S2_TH, S2_TT),
Option_Value = c(V2_HH, V2_HT, V2_TH, V2_TT)
)
# Print the data frame
print(results)
# Input parameters
S2_HH <- 172.8
S2_HT <- 129.6
S2_TH <- 97.2
S2_TT <- 86.4
K <- 120
# Calculate option values
V2_HH <- max(S2_HH - K, 0)
V2_HT <- max(S2_HT - K, 0)
V2_TH <- max(S2_TH - K, 0)
V2_TT <- max(S2_TT - K, 0)
# Create a data frame
results <- data.frame(
State = c("S2(HH)", "S2(HT)", "S2(TH)", "S2(TT)"),
Stock_Price = c(S2_HH, S2_HT, S2_TH, S2_TT),
Option_Value = c(V2_HH, V2_HT, V2_TH, V2_TT)
)
# Print the data frame
results
# Input parameters
u <- 1.20
d <- 0.90
r <- 0.10
# Calculate risk-neutral probabilities
p_tilde <- (1 + r - d) / (u - d)
q_tilde <- (u - 1 - r) / (u - d)
# Verify that p_tilde + q_tilde = 1
sum_pq <- p_tilde + q_tilde
# Print results
cat("Risk-neutral probability p_tilde: ", p_tilde, "\n")
cat("Risk-neutral probability q_tilde: ", q_tilde, "\n")
# Input parameters
V2_HH <- 52.8
V2_HT <- 9.6
V2_TH <- 0
V2_TT <- 0
# Calculate option values at t=1
V1_H <- (1/(1 + r)) * (p_tilde * V2_HH + q_tilde * V2_HT)
V1_T <- (1/(1 + r)) * (p_tilde * V2_TH + q_tilde * V2_TT)
# Calculate option value at t=0
V0 <- (1/(1 + r)) * (p_tilde * V1_H + q_tilde * V1_T)
# Print results
cat("Option value at V1(H): ", V1_H, "\n")
cat("Option value at V1(T): ", V1_T, "\n")
cat("Option value at V0: ", V0, "\n")
# Calculate immediate exercise values at t=1
Exercise_H <- max(S1H - K, 0)
# Input parameters
S2_HH <- 172.8
S2_HT <- 129.6
S2_TH <- 97.2
S2_TT <- 86.4
K <- 120
# Calculate option values
V2_HH <- max(S2_HH - K, 0)
V2_HT <- max(S2_HT - K, 0)
V2_TH <- max(S2_TH - K, 0)
V2_TT <- max(S2_TT - K, 0)
# Create a data frame
results <- data.frame(
State = c("S2(HH)", "S2(HT)", "S2(TH)", "S2(TT)"),
Stock_Price = c(S2_HH, S2_HT, S2_TH, S2_TT),
Option_Value = c(V2_HH, V2_HT, V2_TH, V2_TT)
)
# Print the data frame
results
# Calculate immediate exercise value at V_1(H)
Exercise_H <- max(S1H - K, 0)
# Parameters
S0 <- 120  # Initial stock price
u <- 1.2   # Up movement
d <- 0.9   # Down movement
K <- 120   # Strike price
# Stock prices at t=1
S1H <- S0 * u  # Stock price at the high node (H)
S1T <- S0 * d  # Stock price at the low node (T)
# Calculate immediate exercise value at V_1(H)
Exercise_H <- max(S1H - K, 0)
# Calculate the expected future value at V_1(H)
Expected_Future_Value_H <- (1/(1 + r)) * (p_tilde * V2_HH + q_tilde * V2_HT)
# Calculate the value of the American call option at V_1(H)
V1_H_American <- max(Exercise_H, Expected_Future_Value_H)
# Print the result
cat("American option value at V1(H): ", V1_H_American, "\n")
# Calculate immediate exercise value at V_1(T)
Exercise_T <- max(S1T - K, 0)
# Calculate the expected future value at V_1(T)
Expected_Future_Value_T <- (1/(1 + r)) * (p_tilde * V2_TH + q_tilde * V2_TT)
# Calculate the value of the American call option at V_1(T)
V1_T_American <- max(Exercise_T, Expected_Future_Value_T)
# Calculate immediate exercise value at V_0
Exercise_0 <- max(S0 - K, 0)
# Calculate the expected future value at V_0
Expected_Future_Value_0 <- (1/(1 + r)) * (p_tilde * V1_H_American + q_tilde * V1_T_American)
# Calculate the value of the American call option at V_0
V0_American <- max(Exercise_0, Expected_Future_Value_0)
# Print the results
cat("American option value at V1(T): ", V1_T_American, "\n")
cat("American option value at V0: ", V0_American, "\n")
# Parameters
S0 <- 120  # Initial stock price
u <- 1.2   # Up movement
d <- 0.9   # Down movement
K <- 120   # Strike price
# Stock prices at t=1
S1H <- S0 * u  # Stock price at the high node (H)
S1T <- S0 * d  # Stock price at the low node (T)
# Calculate immediate exercise value at V_1(H)
Exercise_H <- max(S1H - K, 0)
# Calculate the expected future value at V_1(H)
Expected_Future_Value_H <- (1/(1 + r)) * (p_tilde * V2_HH + q_tilde * V2_HT)
# Calculate the value of the American call option at V_1(H)
V1_H_American <- max(Exercise_H, Expected_Future_Value_H)
# Print the result
cat("American option value at V1(H): ", V1_H_American, "\n")
# Calculate immediate exercise value at V_1(T)
Exercise_T <- max(S1T - K, 0)
# Calculate the expected future value at V_1(T)
Expected_Future_Value_T <- (1/(1 + r)) * (p_tilde * V2_TH + q_tilde * V2_TT)
# Calculate the value of the American call option at V_1(T)
V1_T_American <- max(Exercise_T, Expected_Future_Value_T)
# Calculate immediate exercise value at V_0
Exercise_0 <- max(S0 - K, 0)
# Calculate the expected future value at V_0
Expected_Future_Value_0 <- (1/(1 + r)) * (p_tilde * V1_H_American + q_tilde * V1_T_American)
# Calculate the value of the American call option at V_0
V0_American <- max(Exercise_0, Expected_Future_Value_0)
# Print the results
cat("American Call option value at V1(T): ", V1_T_American, "\n")
cat("American Call option value at V0: ", V0_American, "\n")
# Parameters
S0 <- 120  # Initial stock price
u <- 1.2   # Up movement
d <- 0.9   # Down movement
K <- 120   # Strike price
# Stock prices at t=1
S1H <- S0 * u  # Stock price at the high node (H)
S1T <- S0 * d  # Stock price at the low node (T)
# Calculate immediate exercise value at V_1(H)
Exercise_H <- max(S1H - K, 0)
# Calculate the expected future value at V_1(H)
Expected_Future_Value_H <- (1/(1 + r)) * (p_tilde * V2_HH + q_tilde * V2_HT)
# Calculate the value of the American call option at V_1(H)
V1_H_American <- max(Exercise_H, Expected_Future_Value_H)
# Print the result
cat("American Call option value at V1(H): ", V1_H_American, "\n")
# Calculate immediate exercise value at V_1(T)
Exercise_T <- max(S1T - K, 0)
# Calculate the expected future value at V_1(T)
Expected_Future_Value_T <- (1/(1 + r)) * (p_tilde * V2_TH + q_tilde * V2_TT)
# Calculate the value of the American call option at V_1(T)
V1_T_American <- max(Exercise_T, Expected_Future_Value_T)
# Calculate immediate exercise value at V_0
Exercise_0 <- max(S0 - K, 0)
# Calculate the expected future value at V_0
Expected_Future_Value_0 <- (1/(1 + r)) * (p_tilde * V1_H_American + q_tilde * V1_T_American)
# Calculate the value of the American call option at V_0
V0_American <- max(Exercise_0, Expected_Future_Value_0)
# Print the results
cat("American Call option value at V1(T): ", V1_T_American, "\n")
cat("American Call option value at V0: ", V0_American, "\n")
# Input parameters
V2_HH <- 52.8
V2_HT <- 9.6
V2_TH <- 0
V2_TT <- 0
# Calculate option values at t=1
V1_H <- (1/(1 + r)) * (p_tilde * V2_HH + q_tilde * V2_HT)
V1_T <- (1/(1 + r)) * (p_tilde * V2_TH + q_tilde * V2_TT)
# Calculate option value at t=0
V0 <- (1/(1 + r)) * (p_tilde * V1_H + q_tilde * V1_T)
# Print results
cat("Europian Call Option value at V1(H): ", V1_H, "\n")
cat("Europian Call Option value at V1(T): ", V1_T, "\n")
cat("Europian Call Option value at V0: ", V0, "\n")
library(DiagrammeR)
mermaid('
graph LR
S0["S0=12"]
S1H["S1(H)=13.2"]
S1T["S1(T)=11.40"]
S2HH["S2(HH)=14.52"]
S2HT["S2(HT)=12.54"]
S2TH["S2(TH)=12.54"]
S2TT["S2(TT)=10.83"]
S0 --- S1H
S0 --- S1T
S1H --- S2HH
S1H --- S2HT
S1T --- S2TH
S1T --- S2TT
')
library(DiagrammeR)
mermaid('
graph LR
S0["S0=12"]
S1H["S1(H)=13.2-3=10.2"]
S1T["S1(T)=11.40-3=8.4"]
S2HH["S2(HH)=14.52"]
S2HT["S2(HT)=12.54"]
S2TH["S2(TH)=12.54"]
S2TT["S2(TT)=10.83"]
S0 --- S1H
S0 --- S1T
S1H --- S2HH
S1H --- S2HT
S1T --- S2TH
S1T --- S2TT
')
library(DiagrammeR)
mermaid('
graph LR
S0["S0=12"]
S1H["S1(H)=13.2-3=10.2"]
S1T["S1(T)=11.40-3=8.4"]
S2HH["S2(HH)=11.22"]
S2HT["S2(HT)= 9.69"]
S2TH["S2(TH)=12.54"]
S2TT["S2(TT)=10.83"]
S0 --- S1H
S0 --- S1T
S1H --- S2HH
S1H --- S2HT
S1T --- S2TH
S1T --- S2TT
')
library(DiagrammeR)
mermaid('
graph LR
S0["S0=12"]
S1H["S1(H)=13.2-3=10.2"]
S1T["S1(T)=11.40-3=8.4"]
S2HH["S2(HH)=11.22"]
S2HT["S2(HT)= 9.69"]
S2TH["S2(TH)=9.24"]
S2TT["S2(TT)=7.98"]
S0 --- S1H
S0 --- S1T
S1H --- S2HH
S1H --- S2HT
S1T --- S2TH
S1T --- S2TT
')
library(DiagrammeR)
mermaid('
graph LR
S0["S0=12"]
S1H["S1(H)=13.2-3=10.2"]
S1T["S1(T)=11.40-3=8.4"]
S2HH["S2(HH)=11.22"]
S2HT["S2(HT)= 9.69"]
S2TH["S2(TH)=9.24"]
S2TT["S2(TT)=7.98"]
S0 --- S1H
S0 --- S1T
S1H --- S2HH
S1H --- S2HT
S1T --- S2TH
S1T --- S2TT
')
library(DiagrammeR)
mermaid('
graph LR
S0["S0=12"]
S1H["S1(H)=13.2-3=10.2"]
S1T["S1(T)=11.40-3=8.4"]
S2HH["S2(HH)=11.22"]
S2HT["S2(HT)= 9.69"]
S2TH["S2(TH)=9.24"]
S2TT["S2(TT)=7.98"]
S0 --- S1H
S0 --- S1T
S1H --- S2HH
S1H --- S2HT
S1T --- S2TH
S1T --- S2TT
')
# Input parameters
u <- 1.1
d <- 0.95
r <- 0.02
# Calculate risk-neutral probabilities
p_tilde <- (1 + r - d) / (u - d)
q_tilde <- (u - 1 - r) / (u - d)
# Verify that p_tilde + q_tilde = 1
sum_pq <- p_tilde + q_tilde
# Print results
cat("Risk-neutral probability p_tilde: ", p_tilde, "\n")
cat("Risk-neutral probability q_tilde: ", q_tilde, "\n")
# Input parameters
u <- 1.20
d <- 0.90
r <- 0.10
# Calculate risk-neutral probabilities
p_tilde <- (1 + r - d) / (u - d)
q_tilde <- (u - 1 - r) / (u - d)
# Print results
cat("Risk-neutral probability p_tilde: ", p_tilde, "\n")
cat("Risk-neutral probability q_tilde: ", q_tilde, "\n")
# Input parameters
u <- 1.1
d <- 0.95
r <- 0.02
# Calculate risk-neutral probabilities
p_tilde <- (1 + r - d) / (u - d)
q_tilde <- (u - 1 - r) / (u - d)
# Print results
cat("Risk-neutral probability p_tilde: ", p_tilde, "\n")
cat("Risk-neutral probability q_tilde: ", q_tilde, "\n")
# Input parameters
S0 <- 100  # initial stock price
v <- 0.1   # volatility
r <- 0.05  # risk-free rate
X <- 100   # strike price
T <- 0.5   # time to expiration in years
# Calculate d1 and d2
d1 <- (log(S0 / X) + (r + v^2 / 2) * T) / (v * sqrt(T))
d2 <- d1 - v * sqrt(T)
# Print the values for d1 and d2
print(d1)
print(d2)
# Input parameters
S0 <- 100  # initial stock price
v <- 0.1   # volatility
r <- 0.05  # risk-free rate
X <- 100   # strike price
T <- 0.5   # time to expiration in years
# Calculate d1 and d2
d1 <- (log(S0 / X) + (r + v^2 / 2) * T) / (v * sqrt(T))
d2 <- d1 - v * sqrt(T)
# Print the values for d1 and d2
cat("d1: ",d1)
print(d2)
# Input parameters
S0 <- 100  # initial stock price
v <- 0.1   # volatility
r <- 0.05  # risk-free rate
X <- 100   # strike price
T <- 0.5   # time to expiration in years
# Calculate d1 and d2
d1 <- (log(S0 / X) + (r + v^2 / 2) * T) / (v * sqrt(T))
d2 <- d1 - v * sqrt(T)
# Print the values for d1 and d2
cat("d1: ",d1)
cat("d2: ",d2)
# Input parameters
S0 <- 100  # initial stock price
v <- 0.1   # volatility
r <- 0.05  # risk-free rate
X <- 100   # strike price
T <- 0.5   # time to expiration in years
# Calculate d1 and d2
d1 <- (log(S0 / X) + (r + v^2 / 2) * T) / (v * sqrt(T))
d2 <- d1 - v * sqrt(T)
# Print the values for d1 and d2
cat("d1: ",d1,"\n")
cat("d2: ",d2)
# Continue from the previous script
# Calculate the call option price
C <- S0 * pnorm(d1) - X * exp(-r * T) * pnorm(d2)
# Print the call option price
print(C)
# Continue from the previous script
# Calculate the call option price
C <- S0 * pnorm(d1) - X * exp(-r * T) * pnorm(d2)
# Print the call option price
cat("BSM Call option price: ",C,"\n")
# Calculate the put option price
P <- X * exp(-r * T) * pnorm(-d2) - S0 * pnorm(-d1)
# Print the put option price
cat("BSM Put option price: ",P,"\n")
# Define the values
S <- 100    # Stock price
sigma <- 0.1   # Volatility
r <- 0.05   # Risk-free rate
K <- 100    # Strike price
T <- 0.5    # Time to maturity
# Calculate d1 and d2
d1 <- (log(S / K) + (r + 0.5 * sigma^2) * T) / (sigma * sqrt(T))
d2 <- d1 - sigma * sqrt(T)
# Calculate option prices
call <- S * pnorm(d1) - K * exp(-r * T) * pnorm(d2)
put <- K * exp(-r * T) * pnorm(-d2) - S * pnorm(-d1)
# Calculate the greeks
delta_call <- pnorm(d1)
delta_put <- pnorm(d1) - 1
gamma <- dnorm(d1) / (S * sigma * sqrt(T))
theta_call <- - (S * sigma * dnorm(d1)) / (2 * sqrt(T)) - r * K * exp(-r * T) * pnorm(d2)
theta_put <- - (S * sigma * dnorm(d1)) / (2 * sqrt(T)) + r * K * exp(-r * T) * pnorm(-d2)
vega <- S * sqrt(T) * dnorm(d1)
rho_call <- T * K * exp(-r * T) * pnorm(d2)
rho_put <- -T * K * exp(-r * T) * pnorm(-d2)
lambda_call <- S * pnorm(d1) / call
lambda_put <- S * (pnorm(d1) - 1) / put
# Print the results
cat("Call Option Price: ", call, "\n")
cat("Put Option Price: ", put, "\n")
cat("Call Option Delta: ", delta_call, "\n")
cat("Put Option Delta: ", delta_put, "\n")
cat("Gamma: ", gamma, "\n")
cat("Call Option Theta: ", theta_call, "\n")
cat("Put Option Theta: ", theta_put, "\n")
cat("Vega: ", vega, "\n")
cat("Call Option Rho: ", rho_call, "\n")
cat("Put Option Rho: ", rho_put, "\n")
cat("Call Option Lambda: ", lambda_call, "\n")
cat("Put Option Lambda: ", lambda_put, "\n")
# Calculate the put option price
P <- X * exp(-r * T) * pnorm(-d2) - S0 * pnorm(-d1)
# Print the put option price
cat("BSM Put option price: ",P,"\n")
setwd("/Volumes/LocalData/Developer/JHU-Data-Science/3. Getting and Cleaning Data/week3")
clear
